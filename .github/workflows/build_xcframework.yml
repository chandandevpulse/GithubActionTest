name: Build XCFramework

on:
  push:
    tags:        # Trigger the workflow when a new tag is pushed (e.g., v1.0.0)
      - 'v*'     # Matches tags like v1.0, v2.3.4

jobs:
  build:
    name: Build and Create XCFramework
    runs-on: macos-latest # Use the latest macOS runner

    env:
      FRAMEWORK_NAME: GithubActionTest # Replace with your framework's name
      PROJECT_PATH: GithubActionTest.xcodeproj # Or YourWorkspace.xcworkspace if using a workspace
      SCHEME_NAME: GithubActionTest # The scheme that builds your framework (ensure this scheme is configured for 'Release' configuration archiving)
      BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }} #Xcode development certificate for signing Framework
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }} #Development certificate password
      KEYCHAIN_NAME: "Apple Development: Chandan Kumar (47QN7N8VZL)" #Keychain name
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }} #keychain password
      PODSPEC_FILE: GithubActionTest.podspec # Podspec file name

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode version
        #run: sudo xcode-select -s /Applications/Xcode_$(xcodebuild -version | grep Xcode | cut -d' ' -f2).app # Uses the default Xcode on the runner
        # echo "Using Xcode version: $(xcodebuild -version | grep Xcode | cut -d' ' -f2)"
        # Or specify a version:
        run: sudo xcode-select -s /Applications/Xcode_16.2.app # Example for Xcode 16.2

      # Check for Podfile first
      - name: Check for Podfile
        id: file_exists
        uses: andstor/file-existence-action@v3 # Using v3, v2 is also fine
        with:
          files: "Podfile" # This will create an output named 'podfile' (lowercase)

      # Optional: If you use CocoaPods
      - name: Install CocoaPods
        if: steps.file_exists.outputs.podfile == 'true' # Check for 'podfile' output
        run: gem install cocoapods

      - name: Install dependencies (CocoaPods)
        if: steps.file_exists.outputs.podfile == 'true' # Check for 'podfile' output
        run: pod install --repo-update
      
      # Code Sign in
      - name: Create Temporary Keychain
        run: |
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" "$KEYCHAIN_NAME"
          security list-keychains -s "$KEYCHAIN_NAME" # Add to search list
          security default-keychain -s "$KEYCHAIN_NAME"
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" "$KEYCHAIN_NAME"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_NAME" # Set timeout to 6 hours

      - name: Decode and Import Certificate
        run: |
          echo "${{ secrets.BUILD_CERTIFICATE_BASE64 }}" | base64 --decode > certificate.p12
          security import certificate.p12 \
            -k "$KEYCHAIN_NAME" \
            -P "${{ secrets.P12_PASSWORD }}" \
            -T /usr/bin/codesign \
            -T /usr/bin/xcodebuild # Allow xcodebuild and codesign to access the cert
          rm certificate.p12 # Clean up the decoded certificate file
          
      - name: Set Key Partition List (Allow codesigning without prompt)
        # This step is crucial for non-interactive CI environments
        run: |
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" "$KEYCHAIN_NAME"

      # Archive for iOS Devices
      - name: Archive for iOS
        run: |
          xcodebuild archive \
            -project "${{ env.PROJECT_PATH }}" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath "archives/${{ env.FRAMEWORK_NAME }}-iOS" \
            BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
            SKIP_INSTALL=NO
            CODE_SIGNING_ALLOWED=YES
        # If using a workspace, change -project to -workspace, e.g.:
        #   -workspace "${{ env.PROJECT_PATH }}" \

      # Archive for iOS Simulator
      - name: Archive for iOS Simulator
        run: |
          xcodebuild archive \
            -project "${{ env.PROJECT_PATH }}" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -configuration Release \
            -destination "generic/platform=iOS Simulator" \
            -archivePath "archives/${{ env.FRAMEWORK_NAME }}-iOS-Simulator" \
            BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
            SKIP_INSTALL=NO
            CODE_SIGNING_ALLOWED=YES
        # If using a workspace, change -project to -workspace

      # Create XCFramework
      - name: Create XCFramework
        run: |
          xcodebuild -create-xcframework \
            -framework "archives/${{ env.FRAMEWORK_NAME }}-iOS.xcarchive/Products/Library/Frameworks/${{ env.FRAMEWORK_NAME }}.framework" \
            -framework "archives/${{ env.FRAMEWORK_NAME }}-iOS-Simulator.xcarchive/Products/Library/Frameworks/${{ env.FRAMEWORK_NAME }}.framework" \
            -output "${{ env.FRAMEWORK_NAME }}.xcframework"

      # Optional: Zip the XCFramework
      - name: Zip XCFramework
        run: zip -r "${{ env.FRAMEWORK_NAME }}.xcframework.zip" "${{ env.FRAMEWORK_NAME }}.xcframework"
        
      # Generate Podspec file
      - name: Generate Podspec File
        run: |
          cat <<EOF > "${{ env.PODSPEC_FILE }}"
          Pod::Spec.new do |s|
            s.name             = '${{ env.FRAMEWORK_NAME }}'
            s.version          = '$(echo ${GITHUB_REF#refs/tags/v})' 
            s.summary          = 'A short description of GithubActionTest'
            s.description      = <<-DESC
            TODO: Add long description of the pod here.
                            DESC
            s.homepage         = 'https://github.com/chandandevpulse/GithubActionTest'
            s.license          = { :type => 'MIT', :file => 'LICENSE' }
            s.author           = { 'Your Name' => 'chandan.kumar@devpulse.in' }
            s.source           = { :http => 'https://github.com/chandandevpulse/GithubActionTest/releases/download/${GITHUB_REF#refs/tags/}/${{ env.FRAMEWORK_NAME }}.xcframework.zip' }
            s.ios.deployment_target = '16.0'
            s.vendored_frameworks = '${{ env.FRAMEWORK_NAME }}.xcframework'
          end
          EOF

      # Upload XCFramework as an artifact
      - name: Upload XCFramework Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FRAMEWORK_NAME }}.xcframework
          path: ${{ env.FRAMEWORK_NAME }}.xcframework

      # Optional: Upload Zipped XCFramework as an artifact (useful for releases)
      - name: Upload Zipped XCFramework Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FRAMEWORK_NAME }}.xcframework.zip
          path: ${{ env.FRAMEWORK_NAME }}.xcframework.zip
          
      - name: Upload Podspec Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PODSPEC_FILE }}
          path: ${{ env.PODSPEC_FILE }}

      # Optional: Create a GitHub Release and upload the zipped XCFramework
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2 # Updated to v2, v1 is also an option
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ env.FRAMEWORK_NAME }}.xcframework.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }} # Necessary for creating releases
          
      # This step will run even if previous steps fail, to ensure keychain cleanup
      - name: Cleanup Temporary Keychain
        if: always()
        run: |
          security delete-keychain "$KEYCHAIN_NAME" || echo "Failed to delete keychain, it might not exist."
          
      # Validate Podspec
      - name: Validate Podspec
        run: pod spec lint "${{ env.PODSPEC_FILE }}" --allow-warnings
        
      # Push to CocoaPods Trunk (optional)
      - name: Push to CocoaPods Trunk
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          gem install cocoapods
          pod trunk push "${{ env.PODSPEC_FILE }}" --allow-warnings
        env:
          COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}


